%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.5.0
%%CreationDate: Wed Sep 27 13:59:20 2023
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 44.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCTACGTGACTCAGTCAGTACGTCAGCTAGCATGCATGACTCAGTACTGGGTTGGGTTTGGGTTGGGT\
) } def
/len { sequence length } bind def

/coor [
[119.67241669 263.45327759]
[116.28706360 248.84030151]
[112.90170288 234.22731018]
[101.79563904 230.24894714]
[94.02816772 221.20834351]
[91.72125244 209.39021301]
[95.59629822 197.86079407]
[104.75466156 189.67231750]
[102.71216583 174.81204224]
[100.66966248 159.95175171]
[98.62716675 145.09146118]
[96.58466339 130.23117065]
[94.54216766 115.37088013]
[83.89556885 102.58828735]
[90.00065613 87.11338043]
[87.28391266 72.36145782]
[84.56716919 57.60953140]
[81.85042572 42.85760498]
[79.13368225 28.10568047]
[76.41693878 13.35375500]
[73.70019531 -1.39817011]
[69.98307800 -15.93030834]
[65.28292084 -30.17490387]
[60.58275604 -44.41949844]
[55.88259888 -58.66409302]
[50.85940552 -72.79801178]
[45.51577759 -86.81391907]
[30.99186516 -93.04541016]
[25.20590210 -107.75248718]
[31.59060097 -122.20970154]
[46.35802841 -127.83985138]
[60.74693680 -121.30265808]
[66.22064209 -106.47653198]
[59.53168488 -92.15753937]
[64.87531281 -78.14163208]
[70.38439941 -72.83964539]
[70.12719727 -63.36425400]
[74.82735443 -49.11965942]
[79.52751160 -34.87506485]
[84.22766876 -20.63046837]
[87.55392456 -18.69004631]
[89.95841217 -14.86110401]
[90.47435760 -9.67461491]
[88.45211792 -4.11491299]
[91.16886139 10.63701248]
[93.88560486 25.38893700]
[96.60234833 40.14086151]
[99.31909180 54.89278793]
[102.03583527 69.64471436]
[104.75257874 84.39663696]
[114.06273651 91.73614502]
[115.94396210 103.44120789]
[109.40245819 113.32837677]
[111.44495392 128.18867493]
[113.48745728 143.04895020]
[115.52995300 157.90924072]
[117.57245636 172.76953125]
[119.61495209 187.62982178]
[135.03662109 198.16043091]
[138.15577698 216.25752258]
[127.51469421 230.84196472]
[130.90003967 245.45494080]
[134.28540039 260.06793213]
[147.82551575 268.21905518]
[151.55497742 283.57699585]
[143.26115417 297.03018188]
[127.86463165 300.59707642]
[114.49989319 292.16146851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[8 58]
[9 57]
[10 56]
[11 55]
[12 54]
[13 53]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[22 40]
[23 39]
[24 38]
[25 37]
[26 35]
[27 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
