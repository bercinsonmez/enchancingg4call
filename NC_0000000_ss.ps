%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.5.0
%%CreationDate: Wed Oct 11 13:57:30 2023
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 70.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCTACGTGACTCAGTCAGTACGTCAGCTAGCATGCATGACTCAGTACTGGGTTGGGTTTGGGTTGGGT\
) } def
/len { sequence length } bind def

/coor [
[110.63401794 389.37777710]
[100.16271973 378.45959473]
[93.57966614 364.83905029]
[91.52978516 349.85061646]
[94.21390533 334.96267700]
[101.36907196 321.63381958]
[112.29428864 311.16983032]
[125.91921234 304.59591675]
[123.87671661 289.73562622]
[121.83421326 274.87533569]
[119.79171753 260.01504517]
[117.74921417 245.15475464]
[115.70671844 230.29446411]
[104.19071198 217.24562073]
[110.83438110 200.24061584]
[108.11763763 185.48869324]
[105.40089417 170.73677063]
[102.68415070 155.98484802]
[99.96741486 141.23292542]
[97.25067139 126.48099518]
[94.53392792 111.72906494]
[90.81681061 97.19692993]
[86.11664581 82.95233154]
[81.41648865 68.70774078]
[76.71633148 54.46314240]
[71.69313812 40.32923126]
[66.34951019 26.31332207]
[51.82559586 20.08183098]
[46.03963470 5.37475204]
[52.42433167 -9.08246708]
[67.19176483 -14.71261406]
[81.58066559 -8.17542267]
[87.05437469 6.65070772]
[80.36541748 20.96969604]
[85.70904541 34.98560333]
[91.21813202 40.28759384]
[90.96092224 49.76298523]
[95.66108704 64.00757599]
[100.36124420 78.25217438]
[105.06140137 92.49677277]
[108.59487152 94.84333801]
[110.93670654 98.86457062]
[111.30844116 103.91771698]
[109.28585052 109.01232147]
[112.00259399 123.76425171]
[114.71933746 138.51617432]
[117.43608093 153.26809692]
[120.15282440 168.02001953]
[122.86956787 182.77195740]
[125.58631134 197.52388000]
[135.88848877 205.64141846]
[137.69689941 218.22276306]
[130.56700134 228.25196838]
[132.60951233 243.11225891]
[134.65200806 257.97253418]
[136.69450378 272.83282471]
[138.73699951 287.69311523]
[140.77951050 302.55340576]
[155.67280579 305.20761108]
[169.01603699 312.33596802]
[179.50195312 323.24011230]
[186.10325623 336.85180664]
[188.17321777 351.83746338]
[185.50904846 366.72900391]
[178.37176514 380.06744385]
[167.46057129 390.54605103]
[153.84446716 397.13824463]
[138.85740662 399.19815063]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 58]
[9 57]
[10 56]
[11 55]
[12 54]
[13 53]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[22 40]
[23 39]
[24 38]
[25 37]
[26 35]
[27 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
