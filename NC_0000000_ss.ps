%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.5.0
%%CreationDate: Fri Oct 13 17:39:14 2023
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -T 90.000000 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCTACGTGACTCAGTCAGTACGTCAGCTAGCATGCATGACTCAGTACTGGGTTGGGTTTGGGTTGGGT\
) } def
/len { sequence length } bind def

/coor [
[163.01133728 100.34539795]
[148.10839844 102.04909515]
[133.20547485 103.75279999]
[118.30253601 105.45650482]
[109.20497131 116.73394012]
[94.80921173 118.37966156]
[83.40116882 109.44642639]
[68.49823761 111.15013123]
[53.59530258 112.85383606]
[38.69236755 114.55753326]
[33.22437668 128.85298157]
[21.73162460 138.96115112]
[6.85506439 142.55928040]
[-7.98678064 138.82054138]
[-19.38336372 128.60404968]
[-24.71583176 114.25750732]
[-22.75882339 99.07762909]
[-13.96204472 86.55264282]
[-0.34693128 79.56069946]
[14.95786381 79.70849609]
[28.43540955 86.96207428]
[36.98866653 99.65460205]
[51.89159775 97.95090485]
[66.79453278 96.24720001]
[81.69746399 94.54349518]
[90.79502869 83.26605988]
[105.19078827 81.62033844]
[116.59883118 90.55357361]
[131.50177002 88.84986877]
[146.40469360 87.14616394]
[161.30763245 85.44246674]
[161.95524597 70.42490387]
[164.94427490 55.69356918]
[170.20109558 41.61123276]
[177.59628296 28.52468300]
[186.94769287 16.75618744]
[198.02507019 6.59555864]
[210.55560303 -1.70699048]
[224.23071289 -7.94700193]
[238.71365356 -11.97080994]
[253.64775085 -13.67932510]
[268.66525269 -13.03047276]
[283.39633179 -10.04023170]
[297.47824097 -4.78223896]
[310.56417847 2.61402154]
[322.33190918 11.96641064]
[332.49163818 23.04461861]
[340.79315186 35.57583237]
[347.03201294 49.25146103]
[351.05462646 63.73472977]
[352.76193237 78.66897583]
[352.11181641 93.68642426]
[349.12036133 108.41726685]
[343.86120605 122.49874115]
[336.46386719 135.58406067]
[327.11050415 147.35101318]
[316.03146362 157.50982666]
[303.49957275 165.81030273]
[289.82342529 172.04804993]
[275.33984375 176.06947327]
[260.40545654 177.77552795]
[245.38804626 177.12419128]
[230.65745544 174.13151550]
[216.57641602 168.87120056]
[203.49169922 161.47279358]
[191.72550964 152.11845398]
[181.56762695 141.03857422]
[173.26818848 128.50598145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 29]
[4 28]
[7 25]
[8 24]
[9 23]
[10 22]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
