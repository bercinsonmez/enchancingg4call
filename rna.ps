%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.5.0
%%CreationDate: Thu Jun 15 01:41:25 2023
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUUCAGACCGGCGUAAGCCAGGUUGGUUUCUAUCUUUGGGUAAAAACUCUAUAUUUUAGUACGAAAGGACCAAGUAUAGUAAAUAAUUU\
) } def
/len { sequence length } bind def

/coor [
[110.39637756 204.67213440]
[96.71951294 198.51231384]
[85.44298553 188.62091064]
[77.55341339 175.86337280]
[73.74109650 161.35591125]
[74.33959198 146.36785889]
[79.29652405 132.21057129]
[88.17618561 120.12476349]
[74.41802216 126.10078430]
[60.65984726 132.07679749]
[46.90167999 138.05281067]
[33.24754333 144.26284790]
[19.70142365 150.70510864]
[6.15530205 157.14735413]
[-2.69801593 170.95137024]
[-19.06444550 169.91600037]
[-26.10760880 155.10633850]
[-16.58210182 141.75730896]
[-0.28694963 143.60124207]
[13.25917149 137.15898132]
[26.80529213 130.71673584]
[31.59343147 124.87873840]
[40.92566299 124.29464722]
[54.68383408 118.31862640]
[68.44200134 112.34261322]
[82.20017242 106.36659241]
[86.98132324 92.14897919]
[79.62966919 79.07407379]
[72.27801514 65.99916840]
[64.92636871 52.92425919]
[57.57471085 39.84935379]
[44.06680679 31.61241722]
[44.57334137 16.72642899]
[37.22168732 3.65152121]
[29.87003326 -9.42338562]
[22.51838112 -22.49829292]
[8.14237499 -30.38895226]
[8.05844879 -46.78788376]
[22.35293770 -54.82527542]
[36.32089615 -46.23294449]
[35.59328842 -29.84994698]
[42.94494247 -16.77503967]
[50.29659271 -3.70013213]
[57.64824677 9.37477493]
[70.63031006 16.67650414]
[70.64962006 32.49769974]
[78.00127411 45.57260513]
[85.35292816 58.64751434]
[92.70458221 71.72241974]
[100.05622864 84.79732513]
[113.71036530 91.00737000]
[128.39662170 87.95552826]
[143.08288574 84.90368652]
[157.76914978 81.85184479]
[172.45541382 78.80000305]
[187.14167786 75.74816895]
[201.82794189 72.69632721]
[216.51419067 69.64448547]
[224.33290100 59.21434784]
[236.78039551 57.06521988]
[246.97045898 63.82441330]
[261.75234985 61.27575684]
[274.03720093 51.30616760]
[287.89407349 56.76846695]
[300.14337158 45.86494064]
[315.62353516 51.27753067]
[318.40994263 67.43822479]
[305.63613892 77.72229004]
[290.44271851 71.55036163]
[279.21517944 81.33765411]
[264.30099487 76.05764771]
[249.51911926 78.60630798]
[236.79144287 90.55630493]
[219.56604004 84.33074951]
[204.87977600 87.38258362]
[190.19351196 90.43442535]
[175.50724792 93.48626709]
[160.82098389 96.53810883]
[146.13473511 99.58995056]
[131.44847107 102.64178467]
[116.76220703 105.69362640]
[131.76217651 105.72609711]
[146.09643555 110.14524841]
[158.51083374 118.56444550]
[167.91915894 130.24705505]
[173.49826050 144.17089844]
[174.75999451 159.11773682]
[171.59396362 173.77980042]
[164.27716064 186.87425232]
[153.44979858 197.25538635]
[140.05917358 204.01492310]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 26]
[9 25]
[10 24]
[11 23]
[12 21]
[13 20]
[14 19]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[33 44]
[34 43]
[35 42]
[36 41]
[51 81]
[52 80]
[53 79]
[54 78]
[55 77]
[56 76]
[57 75]
[58 74]
[61 72]
[62 71]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
